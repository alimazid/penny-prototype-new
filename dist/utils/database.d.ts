import { PrismaClient } from '@prisma/client';
declare const prisma: PrismaClient<{
    log: ({
        emit: "event";
        level: "query";
    } | {
        emit: "event";
        level: "error";
    } | {
        emit: "event";
        level: "info";
    } | {
        emit: "event";
        level: "warn";
    })[];
    errorFormat: "pretty";
}, "error" | "warn" | "info" | "query", import("@prisma/client/runtime/library").DefaultArgs>;
declare const initializeDatabase: () => Promise<void>;
declare const checkDatabaseHealth: () => Promise<boolean>;
declare const disconnectDatabase: () => Promise<void>;
declare const runTransaction: <T>(fn: (prisma: Omit<PrismaClient, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use" | "$extends">) => Promise<T>) => Promise<T>;
declare const DatabaseOperations: {
    createUser(data: {
        email: string;
        displayName?: string;
        language?: string;
        currency?: string;
        timezone?: string;
    }): Promise<{
        id: string;
        email: string;
        displayName: string | null;
        language: string;
        currency: string;
        timezone: string;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
    }>;
    findUserByEmail(email: string): Promise<({
        emailAccounts: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            gmailAddress: string;
            accessToken: string;
            refreshToken: string;
            tokenExpiresAt: Date | null;
            isConnected: boolean;
            lastSyncAt: Date | null;
            syncSettings: import("@prisma/client/runtime/library").JsonValue;
            errorCount: number;
            userId: string;
        }[];
    } & {
        id: string;
        email: string;
        displayName: string | null;
        language: string;
        currency: string;
        timezone: string;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
    }) | null>;
    createEmailAccount(data: {
        userId: string;
        gmailAddress: string;
        accessToken: string;
        refreshToken: string;
        tokenExpiresAt?: Date;
    }): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        gmailAddress: string;
        accessToken: string;
        refreshToken: string;
        tokenExpiresAt: Date | null;
        isConnected: boolean;
        lastSyncAt: Date | null;
        syncSettings: import("@prisma/client/runtime/library").JsonValue;
        errorCount: number;
        userId: string;
    }>;
    updateEmailAccountTokens(accountId: string, tokens: {
        accessToken: string;
        refreshToken: string;
        tokenExpiresAt?: Date;
    }): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        gmailAddress: string;
        accessToken: string;
        refreshToken: string;
        tokenExpiresAt: Date | null;
        isConnected: boolean;
        lastSyncAt: Date | null;
        syncSettings: import("@prisma/client/runtime/library").JsonValue;
        errorCount: number;
        userId: string;
    }>;
    createProcessedEmail(data: {
        accountId: string;
        gmailId: string;
        messageId: string;
        threadId?: string;
        subject: string;
        fromAddress: string;
        toAddresses: string[];
        receivedAt: Date;
        contentHash: string;
        bodyPreview?: string;
        bodyText?: string;
        hasAttachments?: boolean;
        language?: string;
        gmailLabels?: string[];
    }): Promise<{
        classification: import("@prisma/client").$Enums.EmailClassification;
        id: string;
        language: string;
        createdAt: Date;
        updatedAt: Date;
        gmailId: string;
        messageId: string;
        threadId: string | null;
        subject: string;
        fromAddress: string;
        toAddresses: import("@prisma/client/runtime/library").JsonValue;
        receivedAt: Date;
        contentHash: string;
        bodyPreview: string | null;
        bodyText: string | null;
        confidenceScore: import("@prisma/client/runtime/library").Decimal | null;
        processingStatus: import("@prisma/client").$Enums.ProcessingStatus;
        isValidated: boolean;
        hasAttachments: boolean;
        gmailLabels: import("@prisma/client/runtime/library").JsonValue;
        errorMessage: string | null;
        processingTimeMs: number | null;
        retryCount: number;
        accountId: string;
    }>;
    updateEmailClassification(emailId: string, classification: any, confidenceScore: number): Promise<{
        classification: import("@prisma/client").$Enums.EmailClassification;
        id: string;
        language: string;
        createdAt: Date;
        updatedAt: Date;
        gmailId: string;
        messageId: string;
        threadId: string | null;
        subject: string;
        fromAddress: string;
        toAddresses: import("@prisma/client/runtime/library").JsonValue;
        receivedAt: Date;
        contentHash: string;
        bodyPreview: string | null;
        bodyText: string | null;
        confidenceScore: import("@prisma/client/runtime/library").Decimal | null;
        processingStatus: import("@prisma/client").$Enums.ProcessingStatus;
        isValidated: boolean;
        hasAttachments: boolean;
        gmailLabels: import("@prisma/client/runtime/library").JsonValue;
        errorMessage: string | null;
        processingTimeMs: number | null;
        retryCount: number;
        accountId: string;
    }>;
    updateEmailProcessingStatus(emailId: string, status: any, errorMessage?: string): Promise<{
        classification: import("@prisma/client").$Enums.EmailClassification;
        id: string;
        language: string;
        createdAt: Date;
        updatedAt: Date;
        gmailId: string;
        messageId: string;
        threadId: string | null;
        subject: string;
        fromAddress: string;
        toAddresses: import("@prisma/client/runtime/library").JsonValue;
        receivedAt: Date;
        contentHash: string;
        bodyPreview: string | null;
        bodyText: string | null;
        confidenceScore: import("@prisma/client/runtime/library").Decimal | null;
        processingStatus: import("@prisma/client").$Enums.ProcessingStatus;
        isValidated: boolean;
        hasAttachments: boolean;
        gmailLabels: import("@prisma/client/runtime/library").JsonValue;
        errorMessage: string | null;
        processingTimeMs: number | null;
        retryCount: number;
        accountId: string;
    }>;
    createExtractedData(data: {
        emailId: string;
        transactionAmount?: number;
        currency?: string;
        amountUSD?: number;
        exchangeRate?: number;
        transactionDate?: Date;
        merchantName?: string;
        merchantCategory?: string;
        accountNumber?: string;
        transactionType?: any;
        description?: string;
        referenceNumber?: string;
        balance?: number;
        metadata?: any;
        extractionScore?: number;
    }): Promise<{
        id: string;
        currency: string | null;
        createdAt: Date;
        updatedAt: Date;
        isValidated: boolean;
        transactionAmount: import("@prisma/client/runtime/library").Decimal | null;
        amountUSD: import("@prisma/client/runtime/library").Decimal | null;
        exchangeRate: import("@prisma/client/runtime/library").Decimal | null;
        transactionDate: Date | null;
        merchantName: string | null;
        merchantCategory: string | null;
        accountNumber: string | null;
        transactionType: import("@prisma/client").$Enums.TransactionType;
        description: string | null;
        referenceNumber: string | null;
        balance: import("@prisma/client/runtime/library").Decimal | null;
        metadata: import("@prisma/client/runtime/library").JsonValue;
        extractionScore: import("@prisma/client/runtime/library").Decimal | null;
        validatedBy: string | null;
        validatedAt: Date | null;
        emailId: string;
    }>;
    createAuditLog(data: {
        userId?: string;
        emailId?: string;
        action: any;
        entityType?: string;
        entityId?: string;
        oldValues?: any;
        newValues?: any;
        ipAddress?: string;
        userAgent?: string;
        sessionId?: string;
        metadata?: any;
    }): Promise<{
        id: string;
        createdAt: Date;
        userId: string | null;
        metadata: import("@prisma/client/runtime/library").JsonValue;
        emailId: string | null;
        action: import("@prisma/client").$Enums.AuditAction;
        entityType: string | null;
        entityId: string | null;
        oldValues: import("@prisma/client/runtime/library").JsonValue | null;
        newValues: import("@prisma/client/runtime/library").JsonValue | null;
        ipAddress: string | null;
        userAgent: string | null;
        sessionId: string | null;
    }>;
    recordPerformanceMetric(data: {
        metricName: string;
        metricValue: number;
        metricUnit?: string;
        category?: string;
        tags?: any;
    }): Promise<{
        id: string;
        metricName: string;
        metricValue: import("@prisma/client/runtime/library").Decimal;
        metricUnit: string;
        category: string;
        tags: import("@prisma/client/runtime/library").JsonValue;
        recordedAt: Date;
    }>;
    createQueueJob(data: {
        jobId: string;
        queueName: string;
        jobType: string;
        priority?: number;
        data?: any;
        maxAttempts?: number;
    }): Promise<{
        error: string | null;
        data: import("@prisma/client/runtime/library").JsonValue;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        result: import("@prisma/client/runtime/library").JsonValue | null;
        jobId: string;
        queueName: string;
        jobType: string;
        status: import("@prisma/client").$Enums.JobStatus;
        priority: number;
        attempts: number;
        maxAttempts: number;
        progress: number;
        startedAt: Date | null;
        completedAt: Date | null;
        failedAt: Date | null;
    }>;
    updateQueueJobStatus(jobId: string, status: any, data?: {
        progress?: number;
        result?: any;
        error?: string;
        attempts?: number;
    }): Promise<{
        error: string | null;
        data: import("@prisma/client/runtime/library").JsonValue;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        result: import("@prisma/client/runtime/library").JsonValue | null;
        jobId: string;
        queueName: string;
        jobType: string;
        status: import("@prisma/client").$Enums.JobStatus;
        priority: number;
        attempts: number;
        maxAttempts: number;
        progress: number;
        startedAt: Date | null;
        completedAt: Date | null;
        failedAt: Date | null;
    }>;
    findEmailAccountById(accountId: string): Promise<({
        user: {
            id: string;
            email: string;
            displayName: string | null;
            language: string;
            currency: string;
            timezone: string;
            isActive: boolean;
            createdAt: Date;
            updatedAt: Date;
        };
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        gmailAddress: string;
        accessToken: string;
        refreshToken: string;
        tokenExpiresAt: Date | null;
        isConnected: boolean;
        lastSyncAt: Date | null;
        syncSettings: import("@prisma/client/runtime/library").JsonValue;
        errorCount: number;
        userId: string;
    }) | null>;
    findProcessedEmailByGmailId(gmailId: string): Promise<{
        classification: import("@prisma/client").$Enums.EmailClassification;
        id: string;
        language: string;
        createdAt: Date;
        updatedAt: Date;
        gmailId: string;
        messageId: string;
        threadId: string | null;
        subject: string;
        fromAddress: string;
        toAddresses: import("@prisma/client/runtime/library").JsonValue;
        receivedAt: Date;
        contentHash: string;
        bodyPreview: string | null;
        bodyText: string | null;
        confidenceScore: import("@prisma/client/runtime/library").Decimal | null;
        processingStatus: import("@prisma/client").$Enums.ProcessingStatus;
        isValidated: boolean;
        hasAttachments: boolean;
        gmailLabels: import("@prisma/client/runtime/library").JsonValue;
        errorMessage: string | null;
        processingTimeMs: number | null;
        retryCount: number;
        accountId: string;
    } | null>;
    findProcessedEmailById(emailId: string): Promise<{
        classification: import("@prisma/client").$Enums.EmailClassification;
        id: string;
        language: string;
        createdAt: Date;
        updatedAt: Date;
        gmailId: string;
        messageId: string;
        threadId: string | null;
        subject: string;
        fromAddress: string;
        toAddresses: import("@prisma/client/runtime/library").JsonValue;
        receivedAt: Date;
        contentHash: string;
        bodyPreview: string | null;
        bodyText: string | null;
        confidenceScore: import("@prisma/client/runtime/library").Decimal | null;
        processingStatus: import("@prisma/client").$Enums.ProcessingStatus;
        isValidated: boolean;
        hasAttachments: boolean;
        gmailLabels: import("@prisma/client/runtime/library").JsonValue;
        errorMessage: string | null;
        processingTimeMs: number | null;
        retryCount: number;
        accountId: string;
    } | null>;
    createProcessedEmailRecord(data: {
        gmailId: string;
        emailAccountId: string;
        subject?: string;
        sender?: string;
        recipient?: string;
        bodyText?: string;
        bodyHtml?: string;
        receivedAt?: Date;
        threadId?: string;
        labelIds?: string[];
        hasAttachments?: boolean;
        status?: string;
    }): Promise<{
        classification: import("@prisma/client").$Enums.EmailClassification;
        id: string;
        language: string;
        createdAt: Date;
        updatedAt: Date;
        gmailId: string;
        messageId: string;
        threadId: string | null;
        subject: string;
        fromAddress: string;
        toAddresses: import("@prisma/client/runtime/library").JsonValue;
        receivedAt: Date;
        contentHash: string;
        bodyPreview: string | null;
        bodyText: string | null;
        confidenceScore: import("@prisma/client/runtime/library").Decimal | null;
        processingStatus: import("@prisma/client").$Enums.ProcessingStatus;
        isValidated: boolean;
        hasAttachments: boolean;
        gmailLabels: import("@prisma/client/runtime/library").JsonValue;
        errorMessage: string | null;
        processingTimeMs: number | null;
        retryCount: number;
        accountId: string;
    }>;
    updateEmailAccountSyncTime(accountId: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        gmailAddress: string;
        accessToken: string;
        refreshToken: string;
        tokenExpiresAt: Date | null;
        isConnected: boolean;
        lastSyncAt: Date | null;
        syncSettings: import("@prisma/client/runtime/library").JsonValue;
        errorCount: number;
        userId: string;
    }>;
    updateProcessedEmailClassification(emailId: string, data: {
        isFinancial: boolean;
        category: string;
        subcategory?: string;
        confidence: number;
        language: string;
        currency?: string;
        aiReasoning: string;
        status: string;
    }): Promise<{
        classification: import("@prisma/client").$Enums.EmailClassification;
        id: string;
        language: string;
        createdAt: Date;
        updatedAt: Date;
        gmailId: string;
        messageId: string;
        threadId: string | null;
        subject: string;
        fromAddress: string;
        toAddresses: import("@prisma/client/runtime/library").JsonValue;
        receivedAt: Date;
        contentHash: string;
        bodyPreview: string | null;
        bodyText: string | null;
        confidenceScore: import("@prisma/client/runtime/library").Decimal | null;
        processingStatus: import("@prisma/client").$Enums.ProcessingStatus;
        isValidated: boolean;
        hasAttachments: boolean;
        gmailLabels: import("@prisma/client/runtime/library").JsonValue;
        errorMessage: string | null;
        processingTimeMs: number | null;
        retryCount: number;
        accountId: string;
    }>;
    updateProcessedEmailExtraction(emailId: string, data: {
        amount?: number;
        currency?: string;
        date?: string;
        merchantName?: string;
        accountNumber?: string;
        transactionId?: string;
        transactionType?: string;
        description?: string;
        extractedCategory?: string;
        extractionConfidence: number;
        status: string;
    }): Promise<{
        classification: import("@prisma/client").$Enums.EmailClassification;
        id: string;
        language: string;
        createdAt: Date;
        updatedAt: Date;
        gmailId: string;
        messageId: string;
        threadId: string | null;
        subject: string;
        fromAddress: string;
        toAddresses: import("@prisma/client/runtime/library").JsonValue;
        receivedAt: Date;
        contentHash: string;
        bodyPreview: string | null;
        bodyText: string | null;
        confidenceScore: import("@prisma/client/runtime/library").Decimal | null;
        processingStatus: import("@prisma/client").$Enums.ProcessingStatus;
        isValidated: boolean;
        hasAttachments: boolean;
        gmailLabels: import("@prisma/client/runtime/library").JsonValue;
        errorMessage: string | null;
        processingTimeMs: number | null;
        retryCount: number;
        accountId: string;
    }>;
    updateProcessedEmailStatus(emailId: string, status: string): Promise<{
        classification: import("@prisma/client").$Enums.EmailClassification;
        id: string;
        language: string;
        createdAt: Date;
        updatedAt: Date;
        gmailId: string;
        messageId: string;
        threadId: string | null;
        subject: string;
        fromAddress: string;
        toAddresses: import("@prisma/client/runtime/library").JsonValue;
        receivedAt: Date;
        contentHash: string;
        bodyPreview: string | null;
        bodyText: string | null;
        confidenceScore: import("@prisma/client/runtime/library").Decimal | null;
        processingStatus: import("@prisma/client").$Enums.ProcessingStatus;
        isValidated: boolean;
        hasAttachments: boolean;
        gmailLabels: import("@prisma/client/runtime/library").JsonValue;
        errorMessage: string | null;
        processingTimeMs: number | null;
        retryCount: number;
        accountId: string;
    }>;
};
export declare const OpenAIMetrics: {
    recordAPICall(accountId: string, operation: "classification" | "extraction", model?: string): Promise<void>;
    getAccountCallCount(accountId: string): Promise<number>;
    clearAccountMetrics(accountId: string): Promise<void>;
    clearAllMetrics(): Promise<void>;
};
export { prisma, initializeDatabase, checkDatabaseHealth, disconnectDatabase, runTransaction, DatabaseOperations, };
//# sourceMappingURL=database.d.ts.map