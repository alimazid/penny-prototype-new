# ===========================================
# PENNY PROTOTYPE CONFIGURATION
# ===========================================
# Copy this file to config/prototype.env and fill in your values

# ===========================================
# DATABASE CONFIGURATION
# ===========================================
# PostgreSQL connection string
DATABASE_URL="postgresql://penny:password123@localhost:5432/penny_prototype"

# Redis connection string  
REDIS_URL="redis://localhost:6379"

# ===========================================
# AI SERVICE CONFIGURATION
# ===========================================
# OpenAI API Configuration (recommended)
OPENAI_API_KEY="sk-your-openai-api-key-here"
OPENAI_ORGANIZATION_ID=""  # Optional, leave empty if not using

# Alternative: Anthropic Claude API (if you prefer Claude)
# ANTHROPIC_API_KEY="your-anthropic-api-key-here"
# AI_PROVIDER="openai"  # or "anthropic"

# ===========================================
# GMAIL API CONFIGURATION
# ===========================================
# Google Cloud Console - OAuth 2.0 credentials
GOOGLE_CLIENT_ID="your-google-client-id.apps.googleusercontent.com"
GOOGLE_CLIENT_SECRET="your-google-client-secret"
GOOGLE_REDIRECT_URI="http://localhost:3000/auth/google/callback"

# Google Cloud Service Account (for server-to-server)
GOOGLE_SERVICE_ACCOUNT_EMAIL="your-service-account@your-project.iam.gserviceaccount.com"
GOOGLE_PRIVATE_KEY="-----BEGIN PRIVATE KEY-----\nyour-private-key-here\n-----END PRIVATE KEY-----"
GOOGLE_PROJECT_ID="your-google-cloud-project-id"

# Pub/Sub Configuration for Gmail webhooks
GOOGLE_PUBSUB_TOPIC="projects/your-project-id/topics/gmail-notifications"
GOOGLE_PUBSUB_SUBSCRIPTION="projects/your-project-id/subscriptions/penny-prototype"

# ===========================================
# APPLICATION CONFIGURATION
# ===========================================
# Server Configuration
PORT=3000
NODE_ENV="development"
HOST="localhost"

# JWT Configuration for sessions
JWT_SECRET="your-super-secret-jwt-key-change-this-in-production"
JWT_EXPIRES_IN="24h"

# Webhook Configuration (for Gmail notifications)
# Use ngrok for local development: ngrok http 3000
WEBHOOK_BASE_URL="https://your-ngrok-subdomain.ngrok.io"
WEBHOOK_SECRET="webhook-secret-for-verification"

# ===========================================
# PROTOTYPE-SPECIFIC SETTINGS
# ===========================================
# Email Processing Configuration
MAX_EMAILS_PER_BATCH=10
PROCESSING_TIMEOUT_SECONDS=30
RETRY_ATTEMPTS=3
QUEUE_CONCURRENCY=2

# AI Classification Configuration
AI_CLASSIFICATION_MODEL="gpt-4"  # or "gpt-3.5-turbo" for faster/cheaper
AI_EXTRACTION_MODEL="gpt-4"
AI_TEMPERATURE=0.1  # Lower for more consistent results
AI_MAX_TOKENS=2000

# Supported Languages (comma-separated)
SUPPORTED_LANGUAGES="en,es,fr,de,pt,it,ja,zh"

# Supported Currencies (comma-separated) 
SUPPORTED_CURRENCIES="USD,EUR,GBP,JPY,CAD,AUD,CHF,CNY,BRL,MXN"

# ===========================================
# DEVELOPMENT & TESTING
# ===========================================
# Log Level (error, warn, info, debug)
LOG_LEVEL="debug"

# Enable detailed API logging
ENABLE_REQUEST_LOGGING=true

# Test Gmail Account (for development)
TEST_GMAIL_ADDRESS="your-test-email@gmail.com"

# Sample Data Configuration
USE_SAMPLE_EMAILS=true
SAMPLE_EMAIL_COUNT=20

# ===========================================
# PERFORMANCE & MONITORING
# ===========================================
# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000  # 15 minutes
RATE_LIMIT_MAX_REQUESTS=100

# Database Connection Pool
DB_CONNECTION_LIMIT=10
DB_CONNECTION_TIMEOUT=30000

# Redis Configuration
REDIS_CONNECTION_POOL_SIZE=10
REDIS_COMMAND_TIMEOUT=5000

# ===========================================
# SECURITY (PROTOTYPE ONLY)
# ===========================================
# CORS Configuration
CORS_ORIGIN="http://localhost:3000"
CORS_CREDENTIALS=true

# Session Configuration
SESSION_SECRET="session-secret-change-this"
SESSION_MAX_AGE=86400000  # 24 hours

# ===========================================
# INSTRUCTIONS FOR SETUP
# ===========================================
# 
# 1. GOOGLE CLOUD SETUP:
#    - Create a new project in Google Cloud Console
#    - Enable Gmail API and Pub/Sub API
#    - Create OAuth 2.0 credentials (Web application)
#    - Create a service account for server access
#    - Set up Pub/Sub topic and subscription
#
# 2. OPENAI SETUP:
#    - Get API key from https://platform.openai.com/account/api-keys
#    - Add billing information for API usage
#    - Note: GPT-4 access may require API approval
#
# 3. LOCAL DEVELOPMENT:
#    - Install PostgreSQL: brew install postgresql
#    - Install Redis: brew install redis
#    - Start services: brew services start postgresql redis
#    - Install ngrok: brew install ngrok
#    - Run ngrok: ngrok http 3000
#
# 4. GMAIL SETUP:
#    - Use a test Gmail account (not your primary)
#    - Grant necessary permissions during OAuth flow
#    - Ensure account has some financial emails for testing
#
# ===========================================